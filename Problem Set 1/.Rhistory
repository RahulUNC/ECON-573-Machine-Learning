college = read.csv("/Users/rahul-mba/Rahul/UNC Chapel Hill/ECON 573/Problem Sets/Problem Set 1/College.csv")
auto = read.csv("/Users/rahul-mba/Rahul/UNC Chapel Hill/ECON 573/Problem Sets/Problem Set 1/Auto.csv")
auto = na.omit(auto)
detach(college)
#### Purchases of Ben and Jerry's Ice Cream
benjer = read.csv("BenAndJerry.csv")
## explore a bit
names(benjer)
priceper1 = (benjer$price_paid_deal + benjer$price_paid_non_deal)/benjer$quantity
y <- log(1+priceper1)
x <- benjer[,c("flavor_descr","size1_descr",
"household_income","household_size")]
## relevel 'flavor' to have baseline of vanilla
x$flavor_descr <- relevel(x$flavor_descr,"VAN")
x$flavor_descr <- relevel(x$flavor_descr,"VAN")
source("~/Rahul/UNC Chapel Hill/ECON 573/Problem Sets/Problem Set 1/benjerry_start.R")
#### Purchases of Ben and Jerry's Ice Cream
benjer = read.csv("BenAndJerry.csv")
## explore a bit
names(benjer)
## create a new variable for price per unit
priceper1 = (benjer$price_paid_deal + benjer$price_paid_non_deal)/benjer$quantity
y <- log(1+priceper1)
## grab some covariates of interest
## we'll create a properly formatted data.frame
x <- benjer[,c("flavor_descr","size1_descr",
"household_income","household_size")]
## relevel 'flavor' to have baseline of vanilla
x$flavor_descr <- relevel(x$flavor_descr,"VAN")
## coupon usage
x$usecoup = factor(benjer$coupon_value>0)
x$couponper1 <- benjer$coupon_value/benjer$quantity
## organize some demographics
x$region <- factor(benjer$region,
levels=1:4, labels=c("East","Central","South","West"))
x$married <- factor(benjer$marital_status==1)
x$race <- factor(benjer$race,
levels=1:4,labels=c("white","black","asian","other"))
x$hispanic_origin <- benjer$hispanic_origin==1
x$microwave <- benjer$kitchen_appliances %in% c(1,4,5,7)
x$dishwasher <- benjer$kitchen_appliances %in% c(2,4,6,7)
x$sfh <- benjer$type_of_residence==1
x$internet <- benjer$household_internet_connection==1
x$tvcable <- benjer$tv_items>1
## fit the regression
fit <- glm(y~., data=x)
## grab the non-intercept p-values from a glm
## -1 to drop the intercept, 4 is 4th column
pvals <- summary(fit)$coef[-1,4]
# What Flavors do we have?
par(mfrow=c(1,1))
par(mar=c(5,10,5,5))
barplot(table(benjer$flavor),border=NA, las=2)
class(benjer$promotion_type) #gotta make it a factor
hist(y); hist(priceper1);  #the non-logged is more normal
hist(benjer$promotion_type) #Mostly store features
#benjer$promotion_type[is.na(benjer$promotion_type)]=0 #Cant have blanks, making it 5 is going to bite you in the ass, should be 0
#benjer$promotion_type=factor(benjer$promotion_type)
boxplot(y[benjer$promotion_type>0] ~ benjer$promotion_type, col= levels(factor(benjer$promotion))) #gotta add levels to the boxplot
#Not super helpful; lots of data outside >1sd and no clear differences
plot(priceper1[benjer$promotion_type>0] ~ benjer$quantity[benjer$promotion_type>0], col=factor(benjer$promotion_type), pch=20)
legend("topright", fill=levels(factor(benjer$promotion_type)), legend=c("Store Feature","Store Coupon", "Manufacturer Coupon", "Other Deal"))
class(benjer$region)
boxplot(y ~ benjer$region, col=levels(factor(benjer$region))) #useless
plot(y ~ quantity, data=benjer, col=factor(benjer$region), pch=20) #useless
regionpromo=glm(promotion_type ~ region, data=benjer)
#salestable <- tapply(exp(oj$logmove), oj[,c("feat","brand")], sum)
table <- tapply(y[benjer$promotion_type>0], benjer[,c("promotion_type","region")], sum)
#rownames(table)= c("Store Feature","Store Coupon", "Manufacturer Coupon", "Other Deal")
colnames(table)= c("East","Central","South","West")
mosaicplot(table, col=levels(factor(benjer$region)), main="(price?) by promotion and region")
summary(fit)
print("The model sumamrizes log price versus a number of regressors, specifically"); names(x)
fit2 <- glm(y~. - flavor_descr, data=x)
summary(fit2)
print("ignoring flavor we find that all the regressors save asisan, hispanic and dishwasher were significant, let's remove these")
fit3 <- glm(y~. -flavor_descr -race -dishwasher - hispanic_origin, data=x)
summary(fit3)
n=nrow(x)
BIC <- c(reg1=extractAIC(fit, k=log(n))[2],
reg2=extractAIC(fit2, k=log(n))[2],
reg3=extractAIC(fit3, k=log(n))[2])
# Model probabilities
eBIC <- exp(-0.5*(BIC-min(BIC)))
probs <- eBIC/sum(eBIC)
round(probs, 5)
print("The simplified model is better according to BIC. Could use out-of-sample to test, but this should work for now")
### Mo Notes
### Mo Notes
#discrete quantitites make it hard to see relations
### Mo Notes
#discrete quantitites make it hard to see relations
#would like to see sale vs region in mosaic
### Mo Notes
#discrete quantitites make it hard to see relations
#would like to see sale vs region in mosaic
### Mo Notes
#discrete quantitites make it hard to see relations
#would like to see sale vs region in mosaic
### Mo Notes
#discrete quantitites make it hard to see relations
#would like to see sale vs region in mosaic
### Mo Notes
#discrete quantitites make it hard to see relations
#would like to see sale vs region in mosaic
### Mo Notes
#discrete quantitites make it hard to see relations
#would like to see sale vs region in mosaic
### Mo Notes
#discrete quantitites make it hard to see relations
#would like to see sale vs region in mosaic
### Mo Notes
#discrete quantitites make it hard to see relations
#would like to see sale vs region in mosaic
### Mo Notes
#discrete quantitites make it hard to see relations
#would like to see sale vs region in mosaic
college = read.csv("College.csv")
knit_with_parameters("~/Rahul/UNC Chapel Hill/ECON 390/Homework/assignment1.Rmd")
my_vec = c(1:5)
nan_Ids = which(is.na(draws_NaN))
draws_NaN = is.na(log_draws)
sub_ids = c("rnarveka")
sub_ids
my_vec = c(1:5)
my_vec
my_vec = my_vec + 10
my_vec
years_alive = c(1994:2021)
years_alive
names(years_alive) = c(1994:2021)
ifleap = list(names(years_alive), years_alive%%4 == 0)
ifleap
norm_draws = rnorm(1000, mean = 0, sd = 1)
norm_draws
log_draws = log(norm_draws)
log_draws
draws_NaN = is.na(log_draws)
draws_NaN
sequenceOfNaNs =  seq(which(is.na(log_draws)))
sequenceOfNaNs
class_length = c(75%/%60, 75%%60)
class_length
mtcars_list = as.list(ls(mtcars))
mtcars_list
letter_mat = matrix(letters, nrow = 2, ncol = 13, byrow = 1)
letter_mat
norm_draws_mat = matrix(rnorm(n = 25, mean = 0, sd = 1), nrow = 5, ncol = 5)
norm_draws_mat
iris_species = factor(iris$Species, levels = c("versicolor", "virginica", "setosa"))
iris_species
first_seq = seq(from = 1.2, to = 5.3, by = 0.05)
first_seq
second_seq = seq(from = 1.2, to = 5.3, length.out = 100)
second_seq
person_id = seq(from = 1, to = 50, by = 1)
person_id
time = seq(from = 2001, to = 2020, by = 1)
time
nan_Ids = which(is.na(draws_NaN))
nan_Ids = which(is.na(draws_NaN))
nan_Ids = which(is.na(draws_NaN))
nan_Ids
nan_Ids = which(draws_NaN == T)
nan_Ids
nan_Ids = which(draws_NaN == T)
pos_ids = which(norm_draws > 0)
even_id_draws = which(norm_draws %% 2 == 0)
mtcars$mpg[20]
mtcars?
mtcars
mtcars
mtcars$mpg[20]
mtcars[1]
mtcars$mpg[20]
mtcars[1][20]
mtcars$mpg[20]
mtcars[1[20]]
mtcars$mpg[20]
mtcars[1]
mtcars$mpg[20]
mtcars[[1]]
mtcars$mpg[20]
mtcars[[1]][20]
mtcars$mpg[20]
mtcars[[1]][20]
mtcars("mpg")
mtcars?
data.frame?
?mtcars
?data.frame
mtcars$mpg[20]
mtcars[[1]][20]
mtcars["mpg"]
mtcars$mpg[20]
mtcars[[1]][20]
mtcars["mpg"][20]
mtcars$mpg[20]
mtcars[[1]][20]
mtcars[["mpg"]][20]
c(mtcars$cyl[17], mtcars$hp[17])
which(mtcars$cyl == 8)
filter(mtcars$cyl == 8)
?subset
subset(mtcars, which(mtcars$cyl == 8))
subset(mtcars, mtcars$cyl == 8)
Titanic
?Titanic
Titanic["crew"]
Titanic["Crew"]
Titanic[1]
Titanic$Crew
str(Titanic)
str(Titanic)
Titanic[1]
str(Titanic)
Titanic[[1]]
str(Titanic)
factor(Titanic, levels = c(4, 2, 2))
str(Titanic)
factor(Titanic, levels = c(4, 2))
str(Titanic)
Titanic["Crew"]
str(Titanic)
Titanic["Crew"]["Female"]["Adult"]
str(Titanic)
partA = Titanic["Crew"]["Female"]["Adult"]
partA
str(Titanic)
partA = Titanic["Crew"]["Female"]["Adult"]
partB = Titanic["1st"]["Male"]["Adult"]
partA = Titanic["1st"]["Female"]["Child"]
partA = Titanic["2nd"]["Male"]["Adult"]
str(Titanic)
partA = Titanic["Crew"]["Female"]["Adult"]
partB = Titanic["1st"]["Male"]["Adult"]
partC = Titanic["1st"]["Female"]["Child"]
partD = Titanic["2nd"]["Male"]["Adult"]
mtcars?wt
mtcars$wt
mtcars$wt
mtcars["wt"]
mtcars$wt
mtcars[["wt"]]
mtcars_list
mtcars$wt
mtcars[["wt"]]
mtcars_list[1]
mtcars[["wt"]]
mtcars_list[10]
mtcars[["wt"]]
mtcars_list[11]
mtcars[["wt"]]
mtcars_list[11]
mtcars[mtcars_list[11]]
mtcars_list[11]
mtcars[mtcars_list[11][1]]
mtcars_list[11][1]
mtcars[mtcars_list[11][1]]
mtcars_list[[11]]
mtcars[mtcars_list[11][1]]
mtcars_list[[11]]
mtcars[mtcars_list[[11]]]
mtcars[mtcars_list[[11]]]
mtcars[[mtcars_list[[11]]]]
mtcars[mtcars_list[[11]]]
sub_ids = c("rnarveka")
sub_ids
my_vec = c(1:5)
my_vec
my_vec = my_vec + 10
my_vec
years_alive = c(1994:2021)
years_alive
names(years_alive) = c(1994:2021)
ifleap = list(names(years_alive), years_alive%%4 == 0)
ifleap
norm_draws = rnorm(1000, mean = 0, sd = 1)
log_draws = log(norm_draws)
draws_NaN = is.na(log_draws)
sequenceOfNaNs =  seq(which(is.na(log_draws)))
sequenceOfNaNs
class_length = c(75%/%60, 75%%60)
class_length
mtcars_list = as.list(ls(mtcars))
mtcars_list
letter_mat = matrix(letters, nrow = 2, ncol = 13, byrow = 1)
letter_mat
norm_draws_mat = matrix(rnorm(n = 25, mean = 0, sd = 1), nrow = 5, ncol = 5)
norm_draws_mat
iris_species = factor(iris$Species, levels = c("versicolor", "virginica", "setosa"))
iris_species
first_seq = seq(from = 1.2, to = 5.3, by = 0.05)
first_seq
second_seq = seq(from = 1.2, to = 5.3, length.out = 100)
second_seq
person_id = seq(from = 1, to = 50, by = 1)
person_id
time = seq(from = 2001, to = 2020, by = 1)
time
nan_Ids = which(draws_NaN == T)
pos_ids = which(norm_draws > 0)
even_id_draws = which(norm_draws %% 2 == 0)
mtcars$mpg[20]
mtcars[[1]][20]
mtcars[["mpg"]][20]
c(mtcars$cyl[17], mtcars$hp[17])
subset(mtcars, mtcars$cyl == 8)
str(Titanic)
partA = Titanic["Crew"]["Female"]["Adult"]
partB = Titanic["1st"]["Male"]["Adult"]
partC = Titanic["1st"]["Female"]["Child"]
partD = Titanic["2nd"]["Male"]["Adult"]
mtcars[[mtcars_list[[11]]]]
mtcars[mtcars_list[[11]]]
#### Purchases of Ben and Jerry's Ice Cream
benjer = read.csv("BenAndJerry.csv")
## explore a bit
names(benjer)
## create a new variable for price per unit
priceper1 = (benjer$price_paid_deal + benjer$price_paid_non_deal)/benjer$quantity
y <- log(1+priceper1)
## grab some covariates of interest
## we'll create a properly formatted data.frame
x <- benjer[,c("flavor_descr","size1_descr",
"household_income","household_size")]
## relevel 'flavor' to have baseline of vanilla
x$flavor_descr <- relevel(x$flavor_descr,"VAN")
lol =  "hi"
benjer = read.csv("BenAndJerry.csv")
names(benjer)
priceper1 = (benjer$price_paid_deal + benjer$price_paid_non_deal)/benjer$quantity
y <- log(1+priceper1)
benjer = read.csv("BenAndJerry.csv")
names(benjer)
priceper1 = (benjer$price_paid_deal + benjer$price_paid_non_deal)/benjer$quantity
y <- log(1+priceper1)
summary(benjer)
benjer = read.csv("BenAndJerry.csv")
names(benjer)
priceper1 = (benjer$price_paid_deal + benjer$price_paid_non_deal)/benjer$quantity
y <- log(1+priceper1)
summary(benjer)
pairs(benjer)
View(benjer)
View(benjer)
benjer = read.csv("BenAndJerry.csv")
names(benjer)
priceper1 = (benjer$price_paid_deal + benjer$price_paid_non_deal)/benjer$quantity
y <- log(1+priceper1)
summary(benjer)
plot(benjer)
